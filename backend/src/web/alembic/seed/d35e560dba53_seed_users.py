"""seed users

Revision ID: d35e560dba53
Revises: 
Create Date: 2024-11-08 10:02:14.139167

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from app.settings import settings
import pandas as pd
from pwdlib.hashers.argon2 import Argon2Hasher
from pwdlib.hashers.bcrypt import BcryptHasher
from app.storage.db.models import User, UserType
from pwdlib import PasswordHash
from pathlib import Path
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession, AsyncConnection

# revision identifiers, used by Alembic.
revision: str = 'd35e560dba53'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_types',
    sa.Column('name', sa.String(length=90), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('login', sa.String(length=200), nullable=False),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.Column('first_name', sa.String(length=320), nullable=False),
    sa.Column('middle_name', sa.String(length=320), nullable=False),
    sa.Column('last_name', sa.String(length=320), nullable=False),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['type_id'], ['user_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


    # ### end Alembic commands ###
    async def seed_db(connection: AsyncConnection):
        session = AsyncSession(bind=connection)
        hasher = PasswordHash((Argon2Hasher(), BcryptHasher()))

        df = pd.read_excel((Path().parent.parent / 'seed').absolute())

        df['hashed_password'] = df.pop('password').apply(lambda x: hasher.hash(x))
        for row in df.iterrows():
            data = row[1]
            first, middle, last = data.fio.split(' ')
            stmt = select(UserType).where(UserType.name == data.type)
            res = await session.scalar(stmt)
            if res is None:
                ut = UserType(name=data.type)
                u = User(id=data.userID, first_name=first, middle_name=middle, last_name=last,
                         login=data.login, phone=data.phone, hashed_password=data.hashed_password,
                         type=ut)
            else:
                u = User(id=data.userID, first_name=first, middle_name=middle, last_name=last,
                         login=data.login, phone=data.phone, hashed_password=data.hashed_password,
                         type_id=res.id)

            session.add(u)
            await session.commit()


    op.run_async(seed_db)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    op.drop_table('user_types')
    # ### end Alembic commands ###
